#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17379
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CityFail.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
using System.IO;
using System.IO.IsolatedStorage;
using Microsoft.Phone.Data.Linq.Mapping;
using Microsoft.Phone.Data.Linq;


public class DebugWriter : TextWriter
{
    private const int DefaultBufferSize = 256;
    private System.Text.StringBuilder _buffer;

    public DebugWriter()
    {
        BufferSize = 256;
        _buffer = new System.Text.StringBuilder(BufferSize);
    }

    public int BufferSize
    {
        get;
        private set;
    }

    public override System.Text.Encoding Encoding
    {
        get { return System.Text.Encoding.UTF8; }
    }

    #region StreamWriter Overrides
    public override void Write(char value)
    {
        _buffer.Append(value);
        if (_buffer.Length >= BufferSize)
            Flush();
    }

    public override void WriteLine(string value)
    {
        Flush();

        using(var reader = new StringReader(value))
        {
            string line; 
            while( null != (line = reader.ReadLine()))
                System.Diagnostics.Debug.WriteLine(line);
        }
    }

    protected override void Dispose(bool disposing)
    {
        if (disposing)
            Flush();
    }

    public override void Flush()
    {
        if (_buffer.Length > 0)
        {
            System.Diagnostics.Debug.WriteLine(_buffer);
            _buffer.Clear();
        }
    }
    #endregion
}


	public partial class CityFailContext : System.Data.Linq.DataContext
	{
		
		public bool CreateIfNotExists()
		{
			bool created = false;
			if (!this.DatabaseExists())
			{
				string[] names = this.GetType().Assembly.GetManifestResourceNames();
				string name = names.Where(n => n.EndsWith(FileName)).FirstOrDefault();
				if (name != null)
				{
					using (Stream resourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(name))
					{
						if (resourceStream != null)
						{
							using (IsolatedStorageFile myIsolatedStorage = IsolatedStorageFile.GetUserStoreForApplication())
							{
								using (IsolatedStorageFileStream fileStream = new IsolatedStorageFileStream(FileName, FileMode.Create, myIsolatedStorage))
								{
									using (BinaryWriter writer = new BinaryWriter(fileStream))
									{
										long length = resourceStream.Length;
										byte[] buffer = new byte[32];
										int readCount = 0;
										using (BinaryReader reader = new BinaryReader(resourceStream))
										{
											// read file in chunks in order to reduce memory consumption and increase performance
											while (readCount < length)
											{
												int actual = reader.Read(buffer, 0, buffer.Length);
												readCount += actual;
												writer.Write(buffer, 0, actual);
											}
										}
									}
								}
							}
							created = true;
						}
						else
						{
							this.CreateDatabase();
							created = true;
						}
					}
				}
				else
				{
					this.CreateDatabase();
					created = true;
				}
			}
			return created;
		}
		
		public bool LogDebug
		{
			set
			{
				if (value)
				{
					this.Log = new DebugWriter();
				}
			}
		}
		
		public static string ConnectionString = "Data Source=isostore:/CityFail.sdf";

		public static string ConnectionStringReadOnly = "Data Source=appdata:/CityFail.sdf;File Mode=Read Only;";

		public static string FileName = "CityFail.sdf";

		public CityFailContext(string connectionString) : base(connectionString)
		{
			OnCreated();
		}
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDescriptor(Descriptor instance);
    partial void UpdateDescriptor(Descriptor instance);
    partial void DeleteDescriptor(Descriptor instance);
    partial void InsertPlace(Place instance);
    partial void UpdatePlace(Place instance);
    partial void DeletePlace(Place instance);
    partial void InsertStopPoint(StopPoint instance);
    partial void UpdateStopPoint(StopPoint instance);
    partial void DeleteStopPoint(StopPoint instance);
    #endregion
		
		public System.Data.Linq.Table<@__VERSION> @__VERSIONs
		{
			get
			{
				return this.GetTable<@__VERSION>();
			}
		}
		
		public System.Data.Linq.Table<Descriptor> Descriptors
		{
			get
			{
				return this.GetTable<Descriptor>();
			}
		}
		
		public System.Data.Linq.Table<Place> Places
		{
			get
			{
				return this.GetTable<Place>();
			}
		}
		
		public System.Data.Linq.Table<StopPoint> StopPoints
		{
			get
			{
				return this.GetTable<StopPoint>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class @__VERSION
	{
		
		private int _SchemaVersion;
		
		private System.DateTime _DateUpdated;
		
		public @__VERSION()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchemaVersion", DbType="Int NOT NULL")]
		public int SchemaVersion
		{
			get
			{
				return this._SchemaVersion;
			}
			set
			{
				if ((this._SchemaVersion != value))
				{
					this._SchemaVersion = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUpdated", DbType="DateTime NOT NULL")]
		public System.DateTime DateUpdated
		{
			get
			{
				return this._DateUpdated;
			}
			set
			{
				if ((this._DateUpdated != value))
				{
					this._DateUpdated = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Descriptor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DescriptorID;
		
		private string _CommonName;
		
		private System.Data.Linq.Binary _VersionColumn;
		
		private EntitySet<StopPoint> _StopPoints;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDescriptorIDChanging(int value);
    partial void OnDescriptorIDChanged();
    partial void OnCommonNameChanging(string value);
    partial void OnCommonNameChanged();
    partial void OnVersionColumnChanging(System.Data.Linq.Binary value);
    partial void OnVersionColumnChanged();
    #endregion
		
		public Descriptor()
		{
			this._StopPoints = new EntitySet<StopPoint>(new Action<StopPoint>(this.attach_StopPoints), new Action<StopPoint>(this.detach_StopPoints));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int DescriptorID
		{
			get
			{
				return this._DescriptorID;
			}
			set
			{
				if ((this._DescriptorID != value))
				{
					this.OnDescriptorIDChanging(value);
					this.SendPropertyChanging();
					this._DescriptorID = value;
					this.SendPropertyChanged("DescriptorID");
					this.OnDescriptorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommonName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CommonName
		{
			get
			{
				return this._CommonName;
			}
			set
			{
				if ((this._CommonName != value))
				{
					this.OnCommonNameChanging(value);
					this.SendPropertyChanging();
					this._CommonName = value;
					this.SendPropertyChanged("CommonName");
					this.OnCommonNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionColumn", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary VersionColumn
		{
			get
			{
				return this._VersionColumn;
			}
			set
			{
				if ((this._VersionColumn != value))
				{
					this.OnVersionColumnChanging(value);
					this.SendPropertyChanging();
					this._VersionColumn = value;
					this.SendPropertyChanged("VersionColumn");
					this.OnVersionColumnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Descriptor.DescriptorID.StopPoint", Storage="_StopPoints", ThisKey="DescriptorID", OtherKey="DescriptorID", DeleteRule="CASCADE")]
		public EntitySet<StopPoint> StopPoints
		{
			get
			{
				return this._StopPoints;
			}
			set
			{
				this._StopPoints.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StopPoints(StopPoint entity)
		{
			this.SendPropertyChanging();
			entity.Descriptor = this;
		}
		
		private void detach_StopPoints(StopPoint entity)
		{
			this.SendPropertyChanging();
			entity.Descriptor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Place : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlaceID;
		
		private decimal _Longitude;
		
		private decimal _Latitude;
		
		private System.Data.Linq.Binary _VersionColumn;
		
		private EntitySet<StopPoint> _StopPoints;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlaceIDChanging(int value);
    partial void OnPlaceIDChanged();
    partial void OnLongitudeChanging(decimal value);
    partial void OnLongitudeChanged();
    partial void OnLatitudeChanging(decimal value);
    partial void OnLatitudeChanged();
    partial void OnVersionColumnChanging(System.Data.Linq.Binary value);
    partial void OnVersionColumnChanged();
    #endregion
		
		public Place()
		{
			this._StopPoints = new EntitySet<StopPoint>(new Action<StopPoint>(this.attach_StopPoints), new Action<StopPoint>(this.detach_StopPoints));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlaceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int PlaceID
		{
			get
			{
				return this._PlaceID;
			}
			set
			{
				if ((this._PlaceID != value))
				{
					this.OnPlaceIDChanging(value);
					this.SendPropertyChanging();
					this._PlaceID = value;
					this.SendPropertyChanged("PlaceID");
					this.OnPlaceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Decimal(15,12) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Decimal(15,12) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionColumn", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary VersionColumn
		{
			get
			{
				return this._VersionColumn;
			}
			set
			{
				if ((this._VersionColumn != value))
				{
					this.OnVersionColumnChanging(value);
					this.SendPropertyChanging();
					this._VersionColumn = value;
					this.SendPropertyChanged("VersionColumn");
					this.OnVersionColumnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Place.PlaceID.StopPoint", Storage="_StopPoints", ThisKey="PlaceID", OtherKey="PlaceID", DeleteRule="CASCADE")]
		public EntitySet<StopPoint> StopPoints
		{
			get
			{
				return this._StopPoints;
			}
			set
			{
				this._StopPoints.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StopPoints(StopPoint entity)
		{
			this.SendPropertyChanging();
			entity.Place = this;
		}
		
		private void detach_StopPoints(StopPoint entity)
		{
			this.SendPropertyChanging();
			entity.Place = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class StopPoint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AtcoCode;
		
		private int _DescriptorID;
		
		private int _PlaceID;
		
		private string _StopClassification;
		
		private string _Notes;
		
		private System.Data.Linq.Binary _VersionColumn;
		
		private EntityRef<Descriptor> _Descriptor;
		
		private EntityRef<Place> _Place;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAtcoCodeChanging(string value);
    partial void OnAtcoCodeChanged();
    partial void OnDescriptorIDChanging(int value);
    partial void OnDescriptorIDChanged();
    partial void OnPlaceIDChanging(int value);
    partial void OnPlaceIDChanged();
    partial void OnStopClassificationChanging(string value);
    partial void OnStopClassificationChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnVersionColumnChanging(System.Data.Linq.Binary value);
    partial void OnVersionColumnChanged();
    #endregion
		
		public StopPoint()
		{
			this._Descriptor = default(EntityRef<Descriptor>);
			this._Place = default(EntityRef<Place>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AtcoCode", DbType="NVarChar(12) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string AtcoCode
		{
			get
			{
				return this._AtcoCode;
			}
			set
			{
				if ((this._AtcoCode != value))
				{
					this.OnAtcoCodeChanging(value);
					this.SendPropertyChanging();
					this._AtcoCode = value;
					this.SendPropertyChanged("AtcoCode");
					this.OnAtcoCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptorID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int DescriptorID
		{
			get
			{
				return this._DescriptorID;
			}
			set
			{
				if ((this._DescriptorID != value))
				{
					if (this._Descriptor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDescriptorIDChanging(value);
					this.SendPropertyChanging();
					this._DescriptorID = value;
					this.SendPropertyChanged("DescriptorID");
					this.OnDescriptorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlaceID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int PlaceID
		{
			get
			{
				return this._PlaceID;
			}
			set
			{
				if ((this._PlaceID != value))
				{
					if (this._Place.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlaceIDChanging(value);
					this.SendPropertyChanging();
					this._PlaceID = value;
					this.SendPropertyChanged("PlaceID");
					this.OnPlaceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StopClassification", DbType="NChar(3) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string StopClassification
		{
			get
			{
				return this._StopClassification;
			}
			set
			{
				if ((this._StopClassification != value))
				{
					this.OnStopClassificationChanging(value);
					this.SendPropertyChanging();
					this._StopClassification = value;
					this.SendPropertyChanged("StopClassification");
					this.OnStopClassificationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionColumn", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary VersionColumn
		{
			get
			{
				return this._VersionColumn;
			}
			set
			{
				if ((this._VersionColumn != value))
				{
					this.OnVersionColumnChanging(value);
					this.SendPropertyChanging();
					this._VersionColumn = value;
					this.SendPropertyChanged("VersionColumn");
					this.OnVersionColumnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Descriptor.DescriptorID.StopPoint", Storage="_Descriptor", ThisKey="DescriptorID", OtherKey="DescriptorID", IsForeignKey=true, DeleteOnNull=true)]
		public Descriptor Descriptor
		{
			get
			{
				return this._Descriptor.Entity;
			}
			set
			{
				Descriptor previousValue = this._Descriptor.Entity;
				if (((previousValue != value) 
							|| (this._Descriptor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Descriptor.Entity = null;
						previousValue.StopPoints.Remove(this);
					}
					this._Descriptor.Entity = value;
					if ((value != null))
					{
						value.StopPoints.Add(this);
						this._DescriptorID = value.DescriptorID;
					}
					else
					{
						this._DescriptorID = default(int);
					}
					this.SendPropertyChanged("Descriptor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Place.PlaceID.StopPoint", Storage="_Place", ThisKey="PlaceID", OtherKey="PlaceID", IsForeignKey=true, DeleteOnNull=true)]
		public Place Place
		{
			get
			{
				return this._Place.Entity;
			}
			set
			{
				Place previousValue = this._Place.Entity;
				if (((previousValue != value) 
							|| (this._Place.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Place.Entity = null;
						previousValue.StopPoints.Remove(this);
					}
					this._Place.Entity = value;
					if ((value != null))
					{
						value.StopPoints.Add(this);
						this._PlaceID = value.PlaceID;
					}
					else
					{
						this._PlaceID = default(int);
					}
					this.SendPropertyChanged("Place");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
